#!/bin/sh

### BEGIN INIT INFO
# Provides:          apicatus
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start apicatus daemon at boot time
# Description:       Enable service provided by apicatus daemon.
### END INIT INFO

# Apicatus upstart script for running a Node.js process as a service
# using Forever as the process monitor. For more configuration options
# associated with Forever, see: https://github.com/nodejitsu/forever
#
# You will need to set the environment variables noted below to conform to
# your use case, and should change the description.
#
description "Apicatus upstart script"
 
start on (startup and net-device-up and local-filesystems)
stop on shutdown

# automatically respawn, but if its respwaning too fast (5 times in 60 seconds, don't do that)
respawn
respawn limit 5 60

# This line is needed so that Upstart reports the pid of the Node.js process
# started by Forever rather than Forever's pid.
expect fork
 
# The following environment variables must be set so as to define
# where Node.js and Forever binaries and the Node.js source code
# can be found.
#
# The example environment variables below assume that Node.js is 
# installed into /home/node/local/node by building from source as outlined 
# here:
# https://www.exratione.com/2011/07/running-a-nodejs-server-as-a-service-using-forever/
#
# It should be easy enough to adapt to the paths to be appropriate to a 
# package installation, but note that the packages available for Ubuntu in
# the default repositories are far behind the times. Most users will be 
# building from source to get a more recent Node.js version.
#
# The full path to the directory containing the node and forever binaries.
# env NODE_BIN="/usr/bin/node"
# The directory containing the application forever startup script.
# env APPLICATION="/route/to/your/my-application.sh"
# The pid file
# env PIDFILE="start-my-application.js"
# Log file path.
# env LOGFILE="/var/log/my-application.log"
# UserId whos supposed to run the server

NAME="apicatus"
NODE_BIN="/usr/bin/node"
DAEMON="/var/www/backend/apicatus.server.sh"
SCRIPTNAME="/etc/init.d/$NAME"
PIDFILE="/var/run/$NAME.pid"
LOGFILE="/var/log/$NAME.log"
USER="webadmin"
export NODE_ENV="production"

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh
# I like to know what is going on
VERBOSE=yes

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions


script
    # Add the node executables to the path, which includes Forever if it is
    # installed globally, which it should be.
    PATH=$NODE_BIN:$PATH
    # The minUptime and spinSleepTime settings stop Forever from thrashing if
    # the application fails immediately on launch. This is generally necessary to
    # avoid loading development servers to the point of failure every time 
    # someone makes an error in application initialization code, or bringing down
    # production servers the same way if a database or other critical service
    # suddenly becomes inaccessible.
    exec $DAEMON start -u $USER >> $LOGFILE
end script

pre-start script
    # make sure node is there, the daemon is also there
    test -x $NODE_BIN || { stop; exit 0; }
    test -x $DAEMON || { stop; exit 0; }
    # Date format same as (new Date()).toISOString() for consistency
    echo "[`date -u +%Y-%m-%dT%T.%3NZ`] (sys) Starting" >> $LOGFILE
end script

pre-stop script
    # Add the node executables to the path.
    PATH=$NODE_BIN:$PATH
    # Here we're using the pre-stop script to stop the Node.js application
    # process so that Forever is given a chance to do its thing and tidy up
    # its data. Note that doing it this way means that each application that
    # runs under Forever must have a different start file name, regardless of
    # which directory it is in.
    echo "[`date -u +%Y-%m-%dT%T.%3NZ`] (sys) Stopping" >> $LOGFILE
    exec $DAEMON stop -u $USER >> $LOGFILE
    # Many daemons don't delete their pidfiles when they exit.
    rm -f $PIDFILE
end script
